
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL CHAR CLOSEBRAC CLOSEPAR COMMA CTEC CTEF CTEI CTES DESDE DIVIDE ENTONCES EQ ESCRIBE FALSE FLOAT FUNCION GT GTE HACER HASTA HAZ ID INT LCURLYB LEE LT LTE MIENTRAS MINUS NEQ OPENBRAC OPENPAR OR PLUS PRINCIPAL PROGRAMA RCURLYB RETORNO SEMICOLON SI SINO TIMES TRUE VARcondicion : SI OPENPAR megaexp CLOSEPAR entonces bloque_entoncesentonces : ENTONCESbloque_entonces : bloque bloque_sinobloque_sino : sino bloque \n                   | emptysino : SINObloque : LCURLYB estatutos_rec RCURLYBestatutos_rec : estatuto estatutos_rec\n                     | emptyestatuto : condicion\n                | megaexpboolean_op : OR \n                  | ANDlogical_op : GT\n                  | GTE\n                  | LT\n                  | LTE\n                  | NEQ\n                  | EQsums : MINUS \n            | PLUS multdiv : TIMES \n               | DIVIDE megaexp : superexp\n               | megaexp boolean_op superexpsuperexp : exp\n                | superexp logical_op expexp : termino\n           | exp sums terminotermino : factor\n               | termino multdiv factorfactor : vcte\n              | openpar megaexp closeparopenpar : OPENPARclosepar : CLOSEPARvcte : ID\n            | CTEI\n            | CTEF\n            | CTEC\n            | TRUE\n            | FALSEempty :'
    
_lr_action_items = {'SI':([0,6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[2,-24,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,-25,-27,-29,-31,-33,-35,-1,-42,2,-3,-5,2,-10,-11,-4,-7,]),'$end':([1,44,45,47,49,56,57,],[0,-1,-42,-3,-5,-4,-7,]),'OPENPAR':([2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[3,4,-34,-24,-26,-28,-30,-32,4,-36,-37,-38,-39,-40,-41,4,-12,-13,4,-14,-15,-16,-17,-18,-19,4,-20,-21,4,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,4,-3,-5,4,-10,-11,-4,-7,]),'ID':([3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[12,-34,-24,-26,-28,-30,-32,12,-36,-37,-38,-39,-40,-41,12,-12,-13,12,-14,-15,-16,-17,-18,-19,12,-20,-21,12,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,12,-3,-5,12,-10,-11,-4,-7,]),'CTEI':([3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[13,-34,-24,-26,-28,-30,-32,13,-36,-37,-38,-39,-40,-41,13,-12,-13,13,-14,-15,-16,-17,-18,-19,13,-20,-21,13,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,13,-3,-5,13,-10,-11,-4,-7,]),'CTEF':([3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[14,-34,-24,-26,-28,-30,-32,14,-36,-37,-38,-39,-40,-41,14,-12,-13,14,-14,-15,-16,-17,-18,-19,14,-20,-21,14,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,14,-3,-5,14,-10,-11,-4,-7,]),'CTEC':([3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[15,-34,-24,-26,-28,-30,-32,15,-36,-37,-38,-39,-40,-41,15,-12,-13,15,-14,-15,-16,-17,-18,-19,15,-20,-21,15,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,15,-3,-5,15,-10,-11,-4,-7,]),'TRUE':([3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[16,-34,-24,-26,-28,-30,-32,16,-36,-37,-38,-39,-40,-41,16,-12,-13,16,-14,-15,-16,-17,-18,-19,16,-20,-21,16,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,16,-3,-5,16,-10,-11,-4,-7,]),'FALSE':([3,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,49,52,54,55,56,57,],[17,-34,-24,-26,-28,-30,-32,17,-36,-37,-38,-39,-40,-41,17,-12,-13,17,-14,-15,-16,-17,-18,-19,17,-20,-21,17,-22,-23,-25,-27,-29,-31,-33,-35,-1,-42,17,-3,-5,17,-10,-11,-4,-7,]),'CLOSEPAR':([5,6,7,8,9,10,12,13,14,15,16,17,35,38,39,40,41,42,43,],[18,-24,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,43,-25,-27,-29,-31,-33,-35,]),'OR':([5,6,7,8,9,10,12,13,14,15,16,17,35,38,39,40,41,42,43,55,],[20,-24,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,20,-25,-27,-29,-31,-33,-35,20,]),'AND':([5,6,7,8,9,10,12,13,14,15,16,17,35,38,39,40,41,42,43,55,],[21,-24,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,21,-25,-27,-29,-31,-33,-35,21,]),'RCURLYB':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,44,45,46,47,49,51,52,53,54,55,56,57,58,],[-24,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,-25,-27,-29,-31,-33,-35,-1,-42,-42,-3,-5,57,-42,-9,-10,-11,-4,-7,-8,]),'GT':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,],[23,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,23,-27,-29,-31,-33,-35,]),'GTE':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,],[24,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,24,-27,-29,-31,-33,-35,]),'LT':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,],[25,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,25,-27,-29,-31,-33,-35,]),'LTE':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,],[26,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,26,-27,-29,-31,-33,-35,]),'NEQ':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,],[27,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,27,-27,-29,-31,-33,-35,]),'EQ':([6,7,8,9,10,12,13,14,15,16,17,38,39,40,41,42,43,],[28,-26,-28,-30,-32,-36,-37,-38,-39,-40,-41,28,-27,-29,-31,-33,-35,]),'MINUS':([7,8,9,10,12,13,14,15,16,17,39,40,41,42,43,],[30,-28,-30,-32,-36,-37,-38,-39,-40,-41,30,-29,-31,-33,-35,]),'PLUS':([7,8,9,10,12,13,14,15,16,17,39,40,41,42,43,],[31,-28,-30,-32,-36,-37,-38,-39,-40,-41,31,-29,-31,-33,-35,]),'TIMES':([8,9,10,12,13,14,15,16,17,40,41,42,43,],[33,-30,-32,-36,-37,-38,-39,-40,-41,33,-31,-33,-35,]),'DIVIDE':([8,9,10,12,13,14,15,16,17,40,41,42,43,],[34,-30,-32,-36,-37,-38,-39,-40,-41,34,-31,-33,-35,]),'ENTONCES':([18,],[37,]),'LCURLYB':([36,37,48,50,],[46,-2,46,-6,]),'SINO':([45,57,],[50,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'condicion':([0,46,52,],[1,54,54,]),'megaexp':([3,11,46,52,],[5,35,55,55,]),'superexp':([3,11,19,46,52,],[6,6,38,6,6,]),'exp':([3,11,19,22,46,52,],[7,7,7,39,7,7,]),'termino':([3,11,19,22,29,46,52,],[8,8,8,8,40,8,8,]),'factor':([3,11,19,22,29,32,46,52,],[9,9,9,9,9,41,9,9,]),'vcte':([3,11,19,22,29,32,46,52,],[10,10,10,10,10,10,10,10,]),'openpar':([3,11,19,22,29,32,46,52,],[11,11,11,11,11,11,11,11,]),'boolean_op':([5,35,55,],[19,19,19,]),'logical_op':([6,38,],[22,22,]),'sums':([7,39,],[29,29,]),'multdiv':([8,40,],[32,32,]),'entonces':([18,],[36,]),'closepar':([35,],[42,]),'bloque_entonces':([36,],[44,]),'bloque':([36,48,],[45,56,]),'bloque_sino':([45,],[47,]),'sino':([45,],[48,]),'empty':([45,46,52,],[49,53,53,]),'estatutos_rec':([46,52,],[51,58,]),'estatuto':([46,52,],[52,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> condicion","S'",1,None,None,None),
  ('condicion -> SI OPENPAR megaexp CLOSEPAR entonces bloque_entonces','condicion',6,'p_condicion','test.py',15),
  ('entonces -> ENTONCES','entonces',1,'p_entonces','test.py',18),
  ('bloque_entonces -> bloque bloque_sino','bloque_entonces',2,'p_condicion_entonces','test.py',22),
  ('bloque_sino -> sino bloque','bloque_sino',2,'p_bloque_sino','test.py',25),
  ('bloque_sino -> empty','bloque_sino',1,'p_bloque_sino','test.py',26),
  ('sino -> SINO','sino',1,'p_condicion_sino','test.py',30),
  ('bloque -> LCURLYB estatutos_rec RCURLYB','bloque',3,'p_bloque','test.py',34),
  ('estatutos_rec -> estatuto estatutos_rec','estatutos_rec',2,'p_estatutos_rec','test.py',37),
  ('estatutos_rec -> empty','estatutos_rec',1,'p_estatutos_rec','test.py',38),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','test.py',41),
  ('estatuto -> megaexp','estatuto',1,'p_estatuto','test.py',42),
  ('boolean_op -> OR','boolean_op',1,'p_boolean_op','test.py',47),
  ('boolean_op -> AND','boolean_op',1,'p_boolean_op','test.py',48),
  ('logical_op -> GT','logical_op',1,'p_logical_op','test.py',53),
  ('logical_op -> GTE','logical_op',1,'p_logical_op','test.py',54),
  ('logical_op -> LT','logical_op',1,'p_logical_op','test.py',55),
  ('logical_op -> LTE','logical_op',1,'p_logical_op','test.py',56),
  ('logical_op -> NEQ','logical_op',1,'p_logical_op','test.py',57),
  ('logical_op -> EQ','logical_op',1,'p_logical_op','test.py',58),
  ('sums -> MINUS','sums',1,'p_sums','test.py',63),
  ('sums -> PLUS','sums',1,'p_sums','test.py',64),
  ('multdiv -> TIMES','multdiv',1,'p_multdiv','test.py',69),
  ('multdiv -> DIVIDE','multdiv',1,'p_multdiv','test.py',70),
  ('megaexp -> superexp','megaexp',1,'p_megaexp','test.py',76),
  ('megaexp -> megaexp boolean_op superexp','megaexp',3,'p_megaexp','test.py',77),
  ('superexp -> exp','superexp',1,'p_superexp','test.py',83),
  ('superexp -> superexp logical_op exp','superexp',3,'p_superexp','test.py',84),
  ('exp -> termino','exp',1,'p_exp','test.py',90),
  ('exp -> exp sums termino','exp',3,'p_exp','test.py',91),
  ('termino -> factor','termino',1,'p_termino','test.py',97),
  ('termino -> termino multdiv factor','termino',3,'p_termino','test.py',98),
  ('factor -> vcte','factor',1,'p_factor','test.py',104),
  ('factor -> openpar megaexp closepar','factor',3,'p_factor','test.py',105),
  ('openpar -> OPENPAR','openpar',1,'p_openpar','test.py',109),
  ('closepar -> CLOSEPAR','closepar',1,'p_closepar','test.py',114),
  ('vcte -> ID','vcte',1,'p_vcte','test.py',118),
  ('vcte -> CTEI','vcte',1,'p_vcte','test.py',119),
  ('vcte -> CTEF','vcte',1,'p_vcte','test.py',120),
  ('vcte -> CTEC','vcte',1,'p_vcte','test.py',121),
  ('vcte -> TRUE','vcte',1,'p_vcte','test.py',122),
  ('vcte -> FALSE','vcte',1,'p_vcte','test.py',123),
  ('empty -> <empty>','empty',0,'p_empty','test.py',128),
]
