
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMAAND ASSIGN BOOL CHAR CLOSEBRAC CLOSEPAR COMMA CTEC CTEF CTEI CTES DESDE DIVIDE ENTONCES EQ FALSE FLOAT FUNCION GT GTE HACER HASTA HAZ ID INT LCURLYB LT LTE MIENTRAS MINUS NEQ OPENBRAC OPENPAR OR PLUS PRINCIPAL PROGRAMA QUACKIN QUACKOUT RCURLYB RETORNO SEMICOLON SI SINO TIMES TRUE VAR VOIDprogram_declaration : PROGRAMA ID SEMICOLON declare_vars declare_func_rec PRINCIPAL OPENPAR CLOSEPAR bloquedeclare_vars : VAR vars\n                    | emptyvars : var_id dimensions more_vars SEMICOLON vars\n            | emptyvar_id : tipo IDmore_vars : more_var_id dimensions more_vars\n                 | emptymore_var_id : COMMA IDdimensions : OPENBRAC CTEI CLOSEBRAC \n                  | OPENBRAC CTEI CLOSEBRAC OPENBRAC CTEI CLOSEBRAC\n                  | emptydeclare_func_rec : declare_func_rec declare_func\n                        | emptydeclare_func : FUNCION func_id OPENPAR declare_func_params CLOSEPAR declare_vars bloquefunc_id : tipo ID\n               | VOID IDdeclare_func_params : get_func_params more_params\n                           | emptyget_func_params : tipo IDmore_params : more_var_id more_params\n                   | emptymore_var_id : COMMA tipo IDtipo : INT \n            | FLOAT\n            | CHAR\n            | BOOLbloque : LCURLYB estatutos_rec RCURLYBestatutos_rec : estatuto estatutos_rec\n                     | emptyestatuto : asignacion \n                | condicion \n                | func_void\n                | retorno\n                | escribe\n                | lee \n                | desde\n                | mientras_estatutoasignacion : id ASSIGN megaexp SEMICOLONcondicion : SI OPENPAR megaexp CLOSEPAR entonces bloque_entoncesentonces : ENTONCESbloque_entonces : bloque bloque_sinobloque_sino : sino bloque \n                   | emptysino : SINOfunc_void : func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLONfunc_call_id : IDfunc_call_params : megaexp\n                        | func_call_params COMMA func_call_params\n                        | emptyescribe : QUACKOUT OPENPAR print_options CLOSEPAR SEMICOLONprint_options : CTES more_print\n                     | megaexp more_printmore_print : COMMA CTES\n                  | COMMA megaexp\n                  | emptylee : QUACKIN OPENPAR ID read_more CLOSEPAR SEMICOLONread_more : COMMA ID read_more\n                 | emptyretorno : RETORNO OPENPAR megaexp CLOSEPAR SEMICOLONdesde : DESDE forId ASSIGN exp hasta exp hacer bloqueforId : IDhasta : HASTAhacer : HACERmientras_estatuto : mientras OPENPAR megaexp CLOSEPAR haz bloquemientras : MIENTRAShaz : HAZid : ID\n          | ID OPENBRAC exp CLOSEBRAC\n          | ID OPENBRAC exp CLOSEBRAC OPENBRAC exp CLOSEBRACboolean_op : OR \n                  | ANDlogical_op : GT\n                  | GTE\n                  | LT\n                  | LTE\n                  | NEQ\n                  | EQsums : MINUS \n            | PLUS multdiv : TIMES \n               | DIVIDE megaexp : superexp\n               | megaexp boolean_op superexpsuperexp : exp\n                | superexp logical_op expexp : termino\n           | exp sums terminotermino : factor\n               | termino multdiv factorfactor : vcte\n              | openpar megaexp closeparopenpar : OPENPARclosepar : CLOSEPARvcte : idvcte : CTEIvcte : CTEFvcte : TRUE\n            | FALSEvcte : CTECempty :'
    
_lr_action_items = {'PROGRAMA':([0,],[2,]),'$end':([1,43,80,],[0,-1,-28,]),'ID':([2,13,14,15,16,17,27,28,32,41,44,48,54,56,57,58,59,60,61,62,63,71,80,82,83,84,85,86,87,88,91,102,108,120,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,151,164,166,167,172,173,174,177,178,179,183,184,186,191,192,],[3,24,-24,-25,-26,-27,36,37,40,51,70,78,70,-31,-32,-33,-34,-35,-36,-37,-38,90,-28,109,109,109,109,109,118,109,109,109,-93,109,-39,109,-71,-72,109,-73,-74,-75,-76,-77,-78,109,-79,-80,109,-81,-82,109,109,171,-46,-60,-51,109,109,-63,-40,-101,-57,-65,-42,-44,-43,-61,]),'SEMICOLON':([3,11,21,23,24,29,30,31,39,40,42,50,51,94,95,96,97,98,99,100,101,103,104,105,106,107,109,142,144,145,153,156,157,158,159,160,161,170,188,],[4,-101,-101,-12,-6,38,-101,-8,-101,-9,-10,-7,-23,-11,-95,123,-83,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,164,166,167,-69,-84,-86,-88,-90,-92,-94,179,-70,]),'VAR':([4,74,],[6,6,]),'PRINCIPAL':([4,5,6,7,8,9,10,12,19,38,49,80,122,],[-101,-101,-101,-3,18,-14,-2,-5,-13,-101,-4,-28,-15,]),'FUNCION':([4,5,6,7,8,9,10,12,19,38,49,80,122,],[-101,-101,-101,-3,20,-14,-2,-5,-13,-101,-4,-28,-15,]),'LCURLYB':([6,7,10,12,34,38,49,74,92,162,163,175,176,185,187,189,190,],[-101,-3,-2,-5,44,-101,-4,-101,44,44,-41,44,-67,44,-45,44,-64,]),'INT':([6,20,32,35,38,],[14,14,14,14,14,]),'FLOAT':([6,20,32,35,38,],[15,15,15,15,15,]),'CHAR':([6,20,32,35,38,],[16,16,16,16,16,]),'BOOL':([6,20,32,35,38,],[17,17,17,17,17,]),'OPENBRAC':([11,24,30,40,42,51,70,109,153,],[22,-6,22,-9,52,-23,88,88,172,]),'COMMA':([11,21,23,24,30,39,40,42,46,51,76,78,84,94,95,97,98,99,100,101,103,104,105,106,107,109,111,112,113,116,117,118,143,153,156,157,158,159,160,161,165,171,188,],[-101,32,-12,-6,-101,32,-9,-10,32,-23,32,-20,-101,-11,-95,-83,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,143,-48,-50,147,147,151,-101,-69,-84,-86,-88,-90,-92,-94,-49,151,-70,]),'OPENPAR':([18,26,36,37,65,66,67,68,69,70,72,73,82,83,84,85,86,88,91,102,108,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,172,173,174,],[25,35,-16,-17,83,84,85,86,87,-47,91,-66,108,108,108,108,108,108,108,108,-93,108,108,-71,-72,108,-73,-74,-75,-76,-77,-78,108,-79,-80,108,-81,-82,108,108,108,108,-63,]),'VOID':([20,],[28,]),'CTEI':([22,52,82,83,84,85,86,88,91,102,108,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,172,173,174,],[33,79,103,103,103,103,103,103,103,103,-93,103,103,-71,-72,103,-73,-74,-75,-76,-77,-78,103,-79,-80,103,-81,-82,103,103,103,103,-63,]),'CLOSEPAR':([25,35,40,45,46,47,51,75,76,77,78,84,93,95,97,98,99,100,101,103,104,105,106,107,109,110,111,112,113,114,115,116,117,118,121,140,143,146,148,149,150,152,153,156,157,158,159,160,161,165,168,169,171,180,188,],[34,-101,-9,74,-101,-19,-23,-18,-101,-22,-20,-101,-21,-95,-83,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,141,142,-48,-50,144,145,-101,-101,-101,155,161,-101,-52,-56,-53,170,-59,-69,-84,-86,-88,-90,-92,-94,-49,-54,-55,-101,-58,-70,]),'CLOSEBRAC':([33,79,95,99,100,101,103,104,105,106,107,109,119,153,158,159,160,161,181,188,],[42,94,-95,-87,-89,-91,-96,-97,-98,-99,-100,-68,153,-69,-88,-90,-92,-94,188,-70,]),'RCURLYB':([44,53,54,55,56,57,58,59,60,61,62,63,80,81,123,164,166,167,177,178,179,183,184,186,191,192,],[-101,80,-101,-30,-31,-32,-33,-34,-35,-36,-37,-38,-28,-29,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'SI':([44,54,56,57,58,59,60,61,62,63,80,123,164,166,167,177,178,179,183,184,186,191,192,],[65,65,-31,-32,-33,-34,-35,-36,-37,-38,-28,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'RETORNO':([44,54,56,57,58,59,60,61,62,63,80,123,164,166,167,177,178,179,183,184,186,191,192,],[67,67,-31,-32,-33,-34,-35,-36,-37,-38,-28,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'QUACKOUT':([44,54,56,57,58,59,60,61,62,63,80,123,164,166,167,177,178,179,183,184,186,191,192,],[68,68,-31,-32,-33,-34,-35,-36,-37,-38,-28,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'QUACKIN':([44,54,56,57,58,59,60,61,62,63,80,123,164,166,167,177,178,179,183,184,186,191,192,],[69,69,-31,-32,-33,-34,-35,-36,-37,-38,-28,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'DESDE':([44,54,56,57,58,59,60,61,62,63,80,123,164,166,167,177,178,179,183,184,186,191,192,],[71,71,-31,-32,-33,-34,-35,-36,-37,-38,-28,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'MIENTRAS':([44,54,56,57,58,59,60,61,62,63,80,123,164,166,167,177,178,179,183,184,186,191,192,],[73,73,-31,-32,-33,-34,-35,-36,-37,-38,-28,-39,-46,-60,-51,-40,-101,-57,-65,-42,-44,-43,-61,]),'ASSIGN':([64,70,89,90,153,188,],[82,-68,120,-62,-69,-70,]),'SINO':([80,178,],[-28,187,]),'CTEF':([82,83,84,85,86,88,91,102,108,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,172,173,174,],[104,104,104,104,104,104,104,104,-93,104,104,-71,-72,104,-73,-74,-75,-76,-77,-78,104,-79,-80,104,-81,-82,104,104,104,104,-63,]),'TRUE':([82,83,84,85,86,88,91,102,108,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,172,173,174,],[105,105,105,105,105,105,105,105,-93,105,105,-71,-72,105,-73,-74,-75,-76,-77,-78,105,-79,-80,105,-81,-82,105,105,105,105,-63,]),'FALSE':([82,83,84,85,86,88,91,102,108,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,172,173,174,],[106,106,106,106,106,106,106,106,-93,106,106,-71,-72,106,-73,-74,-75,-76,-77,-78,106,-79,-80,106,-81,-82,106,106,106,106,-63,]),'CTEC':([82,83,84,85,86,88,91,102,108,120,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,143,147,172,173,174,],[107,107,107,107,107,107,107,107,-93,107,107,-71,-72,107,-73,-74,-75,-76,-77,-78,107,-79,-80,107,-81,-82,107,107,107,107,-63,]),'CTES':([86,147,],[116,168,]),'TIMES':([95,99,100,101,103,104,105,106,107,109,153,158,159,160,161,188,],[-95,138,-89,-91,-96,-97,-98,-99,-100,-68,-69,138,-90,-92,-94,-70,]),'DIVIDE':([95,99,100,101,103,104,105,106,107,109,153,158,159,160,161,188,],[-95,139,-89,-91,-96,-97,-98,-99,-100,-68,-69,139,-90,-92,-94,-70,]),'MINUS':([95,98,99,100,101,103,104,105,106,107,109,119,153,154,157,158,159,160,161,181,182,188,],[-95,135,-87,-89,-91,-96,-97,-98,-99,-100,-68,135,-69,135,135,-88,-90,-92,-94,135,135,-70,]),'PLUS':([95,98,99,100,101,103,104,105,106,107,109,119,153,154,157,158,159,160,161,181,182,188,],[-95,136,-87,-89,-91,-96,-97,-98,-99,-100,-68,136,-69,136,136,-88,-90,-92,-94,136,136,-70,]),'GT':([95,97,98,99,100,101,103,104,105,106,107,109,153,156,157,158,159,160,161,188,],[-95,128,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,128,-86,-88,-90,-92,-94,-70,]),'GTE':([95,97,98,99,100,101,103,104,105,106,107,109,153,156,157,158,159,160,161,188,],[-95,129,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,129,-86,-88,-90,-92,-94,-70,]),'LT':([95,97,98,99,100,101,103,104,105,106,107,109,153,156,157,158,159,160,161,188,],[-95,130,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,130,-86,-88,-90,-92,-94,-70,]),'LTE':([95,97,98,99,100,101,103,104,105,106,107,109,153,156,157,158,159,160,161,188,],[-95,131,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,131,-86,-88,-90,-92,-94,-70,]),'NEQ':([95,97,98,99,100,101,103,104,105,106,107,109,153,156,157,158,159,160,161,188,],[-95,132,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,132,-86,-88,-90,-92,-94,-70,]),'EQ':([95,97,98,99,100,101,103,104,105,106,107,109,153,156,157,158,159,160,161,188,],[-95,133,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,133,-86,-88,-90,-92,-94,-70,]),'OR':([95,96,97,98,99,100,101,103,104,105,106,107,109,110,112,114,117,121,140,153,156,157,158,159,160,161,169,188,],[-95,125,-83,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,125,125,125,125,125,125,-69,-84,-86,-88,-90,-92,-94,125,-70,]),'AND':([95,96,97,98,99,100,101,103,104,105,106,107,109,110,112,114,117,121,140,153,156,157,158,159,160,161,169,188,],[-95,126,-83,-85,-87,-89,-91,-96,-97,-98,-99,-100,-68,126,126,126,126,126,126,-69,-84,-86,-88,-90,-92,-94,126,-70,]),'HASTA':([95,99,100,101,103,104,105,106,107,109,153,154,158,159,160,161,188,],[-95,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,174,-88,-90,-92,-94,-70,]),'HACER':([95,99,100,101,103,104,105,106,107,109,153,158,159,160,161,182,188,],[-95,-87,-89,-91,-96,-97,-98,-99,-100,-68,-69,-88,-90,-92,-94,190,-70,]),'ENTONCES':([141,],[163,]),'HAZ':([155,],[176,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_declaration':([0,],[1,]),'declare_vars':([4,74,],[5,92,]),'empty':([4,5,6,11,21,30,35,38,39,44,46,54,74,76,84,116,117,118,143,171,178,],[7,9,12,23,31,23,47,12,31,55,77,55,7,77,113,148,148,152,113,152,186,]),'declare_func_rec':([5,],[8,]),'vars':([6,38,],[10,49,]),'var_id':([6,38,],[11,11,]),'tipo':([6,20,32,35,38,],[13,27,41,48,13,]),'declare_func':([8,],[19,]),'dimensions':([11,30,],[21,39,]),'func_id':([20,],[26,]),'more_vars':([21,39,],[29,50,]),'more_var_id':([21,39,46,76,],[30,30,76,76,]),'bloque':([34,92,162,175,185,189,],[43,122,178,183,191,192,]),'declare_func_params':([35,],[45,]),'get_func_params':([35,],[46,]),'estatutos_rec':([44,54,],[53,81,]),'estatuto':([44,54,],[54,54,]),'asignacion':([44,54,],[56,56,]),'condicion':([44,54,],[57,57,]),'func_void':([44,54,],[58,58,]),'retorno':([44,54,],[59,59,]),'escribe':([44,54,],[60,60,]),'lee':([44,54,],[61,61,]),'desde':([44,54,],[62,62,]),'mientras_estatuto':([44,54,],[63,63,]),'id':([44,54,82,83,84,85,86,88,91,102,120,124,127,134,137,143,147,172,173,],[64,64,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'func_call_id':([44,54,],[66,66,]),'mientras':([44,54,],[72,72,]),'more_params':([46,76,],[75,93,]),'forId':([71,],[89,]),'megaexp':([82,83,84,85,86,91,102,143,147,],[96,110,112,114,117,121,140,112,169,]),'superexp':([82,83,84,85,86,91,102,124,143,147,],[97,97,97,97,97,97,97,156,97,97,]),'exp':([82,83,84,85,86,88,91,102,120,124,127,143,147,172,173,],[98,98,98,98,98,119,98,98,154,98,157,98,98,181,182,]),'termino':([82,83,84,85,86,88,91,102,120,124,127,134,143,147,172,173,],[99,99,99,99,99,99,99,99,99,99,99,158,99,99,99,99,]),'factor':([82,83,84,85,86,88,91,102,120,124,127,134,137,143,147,172,173,],[100,100,100,100,100,100,100,100,100,100,100,100,159,100,100,100,100,]),'vcte':([82,83,84,85,86,88,91,102,120,124,127,134,137,143,147,172,173,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'openpar':([82,83,84,85,86,88,91,102,120,124,127,134,137,143,147,172,173,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'func_call_params':([84,143,],[111,165,]),'print_options':([86,],[115,]),'boolean_op':([96,110,112,114,117,121,140,169,],[124,124,124,124,124,124,124,124,]),'logical_op':([97,156,],[127,127,]),'sums':([98,119,154,157,181,182,],[134,134,134,134,134,134,]),'multdiv':([99,158,],[137,137,]),'more_print':([116,117,],[146,149,]),'read_more':([118,171,],[150,180,]),'closepar':([140,],[160,]),'entonces':([141,],[162,]),'hasta':([154,],[173,]),'haz':([155,],[175,]),'bloque_entonces':([162,],[177,]),'bloque_sino':([178,],[184,]),'sino':([178,],[185,]),'hacer':([182,],[189,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_declaration","S'",1,None,None,None),
  ('program_declaration -> PROGRAMA ID SEMICOLON declare_vars declare_func_rec PRINCIPAL OPENPAR CLOSEPAR bloque','program_declaration',9,'p_program_declaration','patitoParser.py',19),
  ('declare_vars -> VAR vars','declare_vars',2,'p_declare_vars','patitoParser.py',28),
  ('declare_vars -> empty','declare_vars',1,'p_declare_vars','patitoParser.py',29),
  ('vars -> var_id dimensions more_vars SEMICOLON vars','vars',5,'p_vars','patitoParser.py',32),
  ('vars -> empty','vars',1,'p_vars','patitoParser.py',33),
  ('var_id -> tipo ID','var_id',2,'p_var_id','patitoParser.py',36),
  ('more_vars -> more_var_id dimensions more_vars','more_vars',3,'p_more_vars','patitoParser.py',41),
  ('more_vars -> empty','more_vars',1,'p_more_vars','patitoParser.py',42),
  ('more_var_id -> COMMA ID','more_var_id',2,'p_more_var_id','patitoParser.py',45),
  ('dimensions -> OPENBRAC CTEI CLOSEBRAC','dimensions',3,'p_dimensions','patitoParser.py',51),
  ('dimensions -> OPENBRAC CTEI CLOSEBRAC OPENBRAC CTEI CLOSEBRAC','dimensions',6,'p_dimensions','patitoParser.py',52),
  ('dimensions -> empty','dimensions',1,'p_dimensions','patitoParser.py',53),
  ('declare_func_rec -> declare_func_rec declare_func','declare_func_rec',2,'p_declare_func_rec','patitoParser.py',56),
  ('declare_func_rec -> empty','declare_func_rec',1,'p_declare_func_rec','patitoParser.py',57),
  ('declare_func -> FUNCION func_id OPENPAR declare_func_params CLOSEPAR declare_vars bloque','declare_func',7,'p_declare_func','patitoParser.py',60),
  ('func_id -> tipo ID','func_id',2,'p_func_id','patitoParser.py',64),
  ('func_id -> VOID ID','func_id',2,'p_func_id','patitoParser.py',65),
  ('declare_func_params -> get_func_params more_params','declare_func_params',2,'p_declare_func_params','patitoParser.py',69),
  ('declare_func_params -> empty','declare_func_params',1,'p_declare_func_params','patitoParser.py',70),
  ('get_func_params -> tipo ID','get_func_params',2,'p_get_func_params','patitoParser.py',73),
  ('more_params -> more_var_id more_params','more_params',2,'p_more_params','patitoParser.py',77),
  ('more_params -> empty','more_params',1,'p_more_params','patitoParser.py',78),
  ('more_var_id -> COMMA tipo ID','more_var_id',3,'p_more_params_id','patitoParser.py',81),
  ('tipo -> INT','tipo',1,'p_tipo','patitoParser.py',85),
  ('tipo -> FLOAT','tipo',1,'p_tipo','patitoParser.py',86),
  ('tipo -> CHAR','tipo',1,'p_tipo','patitoParser.py',87),
  ('tipo -> BOOL','tipo',1,'p_tipo','patitoParser.py',88),
  ('bloque -> LCURLYB estatutos_rec RCURLYB','bloque',3,'p_bloque','patitoParser.py',92),
  ('estatutos_rec -> estatuto estatutos_rec','estatutos_rec',2,'p_estatutos_rec','patitoParser.py',95),
  ('estatutos_rec -> empty','estatutos_rec',1,'p_estatutos_rec','patitoParser.py',96),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','patitoParser.py',99),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','patitoParser.py',100),
  ('estatuto -> func_void','estatuto',1,'p_estatuto','patitoParser.py',101),
  ('estatuto -> retorno','estatuto',1,'p_estatuto','patitoParser.py',102),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','patitoParser.py',103),
  ('estatuto -> lee','estatuto',1,'p_estatuto','patitoParser.py',104),
  ('estatuto -> desde','estatuto',1,'p_estatuto','patitoParser.py',105),
  ('estatuto -> mientras_estatuto','estatuto',1,'p_estatuto','patitoParser.py',106),
  ('asignacion -> id ASSIGN megaexp SEMICOLON','asignacion',4,'p_asignacion','patitoParser.py',110),
  ('condicion -> SI OPENPAR megaexp CLOSEPAR entonces bloque_entonces','condicion',6,'p_condicion','patitoParser.py',114),
  ('entonces -> ENTONCES','entonces',1,'p_entonces','patitoParser.py',117),
  ('bloque_entonces -> bloque bloque_sino','bloque_entonces',2,'p_condicion_entonces','patitoParser.py',121),
  ('bloque_sino -> sino bloque','bloque_sino',2,'p_bloque_sino','patitoParser.py',124),
  ('bloque_sino -> empty','bloque_sino',1,'p_bloque_sino','patitoParser.py',125),
  ('sino -> SINO','sino',1,'p_condicion_sino','patitoParser.py',129),
  ('func_void -> func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLON','func_void',5,'p_func_void','patitoParser.py',134),
  ('func_call_id -> ID','func_call_id',1,'p_func_call_id','patitoParser.py',138),
  ('func_call_params -> megaexp','func_call_params',1,'p_func_call_params','patitoParser.py',142),
  ('func_call_params -> func_call_params COMMA func_call_params','func_call_params',3,'p_func_call_params','patitoParser.py',143),
  ('func_call_params -> empty','func_call_params',1,'p_func_call_params','patitoParser.py',144),
  ('escribe -> QUACKOUT OPENPAR print_options CLOSEPAR SEMICOLON','escribe',5,'p_escribe','patitoParser.py',150),
  ('print_options -> CTES more_print','print_options',2,'p_print_options','patitoParser.py',153),
  ('print_options -> megaexp more_print','print_options',2,'p_print_options','patitoParser.py',154),
  ('more_print -> COMMA CTES','more_print',2,'p_more_print','patitoParser.py',157),
  ('more_print -> COMMA megaexp','more_print',2,'p_more_print','patitoParser.py',158),
  ('more_print -> empty','more_print',1,'p_more_print','patitoParser.py',159),
  ('lee -> QUACKIN OPENPAR ID read_more CLOSEPAR SEMICOLON','lee',6,'p_lee','patitoParser.py',163),
  ('read_more -> COMMA ID read_more','read_more',3,'p_read_more','patitoParser.py',166),
  ('read_more -> empty','read_more',1,'p_read_more','patitoParser.py',167),
  ('retorno -> RETORNO OPENPAR megaexp CLOSEPAR SEMICOLON','retorno',5,'p_retorno','patitoParser.py',171),
  ('desde -> DESDE forId ASSIGN exp hasta exp hacer bloque','desde',8,'p_desde','patitoParser.py',175),
  ('forId -> ID','forId',1,'p_forId','patitoParser.py',179),
  ('hasta -> HASTA','hasta',1,'p_desde_hasta','patitoParser.py',183),
  ('hacer -> HACER','hacer',1,'p_desde_hacer','patitoParser.py',187),
  ('mientras_estatuto -> mientras OPENPAR megaexp CLOSEPAR haz bloque','mientras_estatuto',6,'p_mientras_estatuto','patitoParser.py',192),
  ('mientras -> MIENTRAS','mientras',1,'p_mientras','patitoParser.py',197),
  ('haz -> HAZ','haz',1,'p_mientras_haz','patitoParser.py',202),
  ('id -> ID','id',1,'p_id','patitoParser.py',208),
  ('id -> ID OPENBRAC exp CLOSEBRAC','id',4,'p_id','patitoParser.py',209),
  ('id -> ID OPENBRAC exp CLOSEBRAC OPENBRAC exp CLOSEBRAC','id',7,'p_id','patitoParser.py',210),
  ('boolean_op -> OR','boolean_op',1,'p_boolean_op','patitoParser.py',215),
  ('boolean_op -> AND','boolean_op',1,'p_boolean_op','patitoParser.py',216),
  ('logical_op -> GT','logical_op',1,'p_logical_op','patitoParser.py',221),
  ('logical_op -> GTE','logical_op',1,'p_logical_op','patitoParser.py',222),
  ('logical_op -> LT','logical_op',1,'p_logical_op','patitoParser.py',223),
  ('logical_op -> LTE','logical_op',1,'p_logical_op','patitoParser.py',224),
  ('logical_op -> NEQ','logical_op',1,'p_logical_op','patitoParser.py',225),
  ('logical_op -> EQ','logical_op',1,'p_logical_op','patitoParser.py',226),
  ('sums -> MINUS','sums',1,'p_sums','patitoParser.py',231),
  ('sums -> PLUS','sums',1,'p_sums','patitoParser.py',232),
  ('multdiv -> TIMES','multdiv',1,'p_multdiv','patitoParser.py',237),
  ('multdiv -> DIVIDE','multdiv',1,'p_multdiv','patitoParser.py',238),
  ('megaexp -> superexp','megaexp',1,'p_megaexp','patitoParser.py',244),
  ('megaexp -> megaexp boolean_op superexp','megaexp',3,'p_megaexp','patitoParser.py',245),
  ('superexp -> exp','superexp',1,'p_superexp','patitoParser.py',251),
  ('superexp -> superexp logical_op exp','superexp',3,'p_superexp','patitoParser.py',252),
  ('exp -> termino','exp',1,'p_exp','patitoParser.py',258),
  ('exp -> exp sums termino','exp',3,'p_exp','patitoParser.py',259),
  ('termino -> factor','termino',1,'p_termino','patitoParser.py',265),
  ('termino -> termino multdiv factor','termino',3,'p_termino','patitoParser.py',266),
  ('factor -> vcte','factor',1,'p_factor','patitoParser.py',272),
  ('factor -> openpar megaexp closepar','factor',3,'p_factor','patitoParser.py',273),
  ('openpar -> OPENPAR','openpar',1,'p_openpar','patitoParser.py',277),
  ('closepar -> CLOSEPAR','closepar',1,'p_closepar','patitoParser.py',282),
  ('vcte -> id','vcte',1,'p_vcte_ID','patitoParser.py',286),
  ('vcte -> CTEI','vcte',1,'p_vcte_CTEI','patitoParser.py',292),
  ('vcte -> CTEF','vcte',1,'p_vcte_CTEF','patitoParser.py',298),
  ('vcte -> TRUE','vcte',1,'p_vcte_CTEB','patitoParser.py',304),
  ('vcte -> FALSE','vcte',1,'p_vcte_CTEB','patitoParser.py',305),
  ('vcte -> CTEC','vcte',1,'p_vcte_CTEC','patitoParser.py',311),
  ('empty -> <empty>','empty',0,'p_empty','patitoParser.py',319),
]
