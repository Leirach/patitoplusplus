
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOL CHAR CLOSEBRAC CLOSEPAR COMMA CTEC CTEF CTEI CTES DESDE DIVIDE ENTONCES EQ FALSE FLOAT FUNCION GT GTE HACER HASTA HAZ ID INT LCURLYB LT LTE MIENTRAS MINUS NEQ OPENBRAC OPENPAR OR PLUS PRINCIPAL PROGRAMA QUACKIN QUACKOUT RCURLYB RETORNO SEMICOLON SI SINO TIMES TRUE VAR VOIDfunc_void : func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLONfunc_call_id : IDfunc_call_params : vcte more_call_params\n                       | emptymore_call_params : COMMA vcte more_call_params\n                        | emptyvcte : ID\n            | CTEI\n            | CTEF\n            | CTEC\n            | TRUE\n            | FALSEempty :'
    
_lr_action_items = {'ID':([0,4,16,],[3,8,8,]),'$end':([1,18,],[0,-1,]),'OPENPAR':([2,3,],[4,-2,]),'CTEI':([4,16,],[9,9,]),'CTEF':([4,16,],[10,10,]),'CTEC':([4,16,],[11,11,]),'TRUE':([4,16,],[12,12,]),'FALSE':([4,16,],[13,13,]),'CLOSEPAR':([4,5,6,7,8,9,10,11,12,13,15,17,19,20,],[-13,14,-13,-4,-7,-8,-9,-10,-11,-12,-3,-6,-13,-5,]),'COMMA':([6,8,9,10,11,12,13,19,],[16,-7,-8,-9,-10,-11,-12,16,]),'SEMICOLON':([14,],[18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'func_void':([0,],[1,]),'func_call_id':([0,],[2,]),'func_call_params':([4,],[5,]),'vcte':([4,16,],[6,19,]),'empty':([4,6,19,],[7,17,17,]),'more_call_params':([6,19,],[15,20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> func_void","S'",1,None,None,None),
  ('func_void -> func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLON','func_void',5,'p_func_void','test.py',19),
  ('func_call_id -> ID','func_call_id',1,'p_func_call_id','test.py',22),
  ('func_call_params -> vcte more_call_params','func_call_params',2,'p_func_call_params','test.py',27),
  ('func_call_params -> empty','func_call_params',1,'p_func_call_params','test.py',28),
  ('more_call_params -> COMMA vcte more_call_params','more_call_params',3,'p_more_call_params','test.py',32),
  ('more_call_params -> empty','more_call_params',1,'p_more_call_params','test.py',33),
  ('vcte -> ID','vcte',1,'p_vcte','test.py',37),
  ('vcte -> CTEI','vcte',1,'p_vcte','test.py',38),
  ('vcte -> CTEF','vcte',1,'p_vcte','test.py',39),
  ('vcte -> CTEC','vcte',1,'p_vcte','test.py',40),
  ('vcte -> TRUE','vcte',1,'p_vcte','test.py',41),
  ('vcte -> FALSE','vcte',1,'p_vcte','test.py',42),
  ('empty -> <empty>','empty',0,'p_empty','test.py',47),
]
