
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CLOSEBRAC CLOSEPAR COLON COMMA CTEC CTEF CTEI CTES DESDE DIVIDE ENTONCES EQ ESCRIBE FLOAT FUNCION GT GTE HACER HASTA HAZ ID INT LCURLYB LEE LT LTE MIENTRAS MINUS NEQ OPENBRAC OPENPAR OR PLUS PRINCIPAL PROGRAMA RCURLYB RETORNO SEMICOLON SI SINO TIMES VARtipo : INT \n            | FLOAT\n            | CHARprogram_declaration : PROGRAMA ID SEMICOLON declare_vars declare_func PRINCIPAL OPENPAR CLOSEPAR bloquedimensions : OPENBRAC CTEI CLOSEBRAC \n                  | OPENBRAC CTEI CLOSEBRAC OPENBRAC CTEI CLOSEBRAC\n                  | emptydeclare_vars : VAR vars\n                    | emptyvars : tipo ID dimensions getvars COLON SEMICOLON vars\n            | empty getvars : COMMA ID dimensions getvars \n               | empty declare_func : FUNCION tipo ID OPENPAR declare_func_params CLOSEPAR declare_vars bloquedeclare_func_params : tipo ID more_params\n                          | emptymore_params : COMMA tipo ID\n                  | emptybloque : LCURLYB estatuto RCURLYBestatuto : asignacion \n                | condicion \n                | func_void\n                | retorno\n                | escribe\n                | lee \n                | desde\n                | mientras\n                | emptyid : ID\n          | ID OPENBRAC exp CLOSEBRAC\n          | ID OPENBRAC exp CLOSEBRAC OPENBRAC exp CLOSEBRACasignacion : id ASSIGN megaexp SEMICOLONcondicion : SI OPENPAR megaexp CLOSEPAR ENTONCES bloque bloque_sinobloque_sino : SINO bloque \n              | emptyfunc_call_params : megaexp more_call_params\n                       | emptymore_call_params : COMMA megaexp\n                        | emptyfunc_void : ID OPENPAR CLOSEPAR func_call_params SEMICOLONescribe : ESCRIBE OPENPAR print_options CLOSEPAR SEMICOLONprint_options : CTES more_print\n                     | megaexp more_printmore_print : COMMA CTES\n                   | COMMA megaexp\n                   | emptylee : LEE OPENPAR ID read_more CLOSEPAR SEMICOLONread_more : COMMA ID read_more\n                 | emptyretorno : RETORNO OPENPAR megaexp CLOSEPARblooean_op : OR \n                  | ANDlogical_op : GT\n                  | GTE\n                  | LT\n                  | LTE\n                  | NEQ\n                  | EQsums : MINUS \n            | PLUS multdiv : TIMES \n               | DIVIDE megaexp : superexp\n               | superexp blooean_op megaexpsuperexp : exp\n                | exp logical_op superexpexp : termino\n            | termino sums exptermino : factor\n               | factor multdiv factorfactor : vcte\n              | OPENPAR megaexp CLOSEPARvcte : id\n            | CTEI\n            | CTEF\n            | CTECdesde : DESDE ID ASSIGN exp HASTA exp HACER bloquemientras : MIENTRAS OPENPAR megaexp CLOSEPAR HAZ bloqueempty :'
    
_lr_action_items = {'INT':([0,],[2,]),'FLOAT':([0,],[3,]),'CHAR':([0,],[4,]),'$end':([1,2,3,4,],[0,-1,-2,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'tipo':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> tipo","S'",1,None,None,None),
  ('tipo -> INT','tipo',1,'p_tipo','patito.py',110),
  ('tipo -> FLOAT','tipo',1,'p_tipo','patito.py',111),
  ('tipo -> CHAR','tipo',1,'p_tipo','patito.py',112),
  ('program_declaration -> PROGRAMA ID SEMICOLON declare_vars declare_func PRINCIPAL OPENPAR CLOSEPAR bloque','program_declaration',9,'p_program_declaration','patito.py',115),
  ('dimensions -> OPENBRAC CTEI CLOSEBRAC','dimensions',3,'p_dimensions','patito.py',119),
  ('dimensions -> OPENBRAC CTEI CLOSEBRAC OPENBRAC CTEI CLOSEBRAC','dimensions',6,'p_dimensions','patito.py',120),
  ('dimensions -> empty','dimensions',1,'p_dimensions','patito.py',121),
  ('declare_vars -> VAR vars','declare_vars',2,'p_declare_vars','patito.py',124),
  ('declare_vars -> empty','declare_vars',1,'p_declare_vars','patito.py',125),
  ('vars -> tipo ID dimensions getvars COLON SEMICOLON vars','vars',7,'p_vars','patito.py',128),
  ('vars -> empty','vars',1,'p_vars','patito.py',129),
  ('getvars -> COMMA ID dimensions getvars','getvars',4,'p_getvars','patito.py',132),
  ('getvars -> empty','getvars',1,'p_getvars','patito.py',133),
  ('declare_func -> FUNCION tipo ID OPENPAR declare_func_params CLOSEPAR declare_vars bloque','declare_func',8,'p_declare_func','patito.py',136),
  ('declare_func_params -> tipo ID more_params','declare_func_params',3,'p_declare_func_params','patito.py',139),
  ('declare_func_params -> empty','declare_func_params',1,'p_declare_func_params','patito.py',140),
  ('more_params -> COMMA tipo ID','more_params',3,'p_more_params','patito.py',143),
  ('more_params -> empty','more_params',1,'p_more_params','patito.py',144),
  ('bloque -> LCURLYB estatuto RCURLYB','bloque',3,'p_block_group','patito.py',147),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','patito.py',151),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','patito.py',152),
  ('estatuto -> func_void','estatuto',1,'p_estatuto','patito.py',153),
  ('estatuto -> retorno','estatuto',1,'p_estatuto','patito.py',154),
  ('estatuto -> escribe','estatuto',1,'p_estatuto','patito.py',155),
  ('estatuto -> lee','estatuto',1,'p_estatuto','patito.py',156),
  ('estatuto -> desde','estatuto',1,'p_estatuto','patito.py',157),
  ('estatuto -> mientras','estatuto',1,'p_estatuto','patito.py',158),
  ('estatuto -> empty','estatuto',1,'p_estatuto','patito.py',159),
  ('id -> ID','id',1,'p_id','patito.py',163),
  ('id -> ID OPENBRAC exp CLOSEBRAC','id',4,'p_id','patito.py',164),
  ('id -> ID OPENBRAC exp CLOSEBRAC OPENBRAC exp CLOSEBRAC','id',7,'p_id','patito.py',165),
  ('asignacion -> id ASSIGN megaexp SEMICOLON','asignacion',4,'p_asignacion','patito.py',169),
  ('condicion -> SI OPENPAR megaexp CLOSEPAR ENTONCES bloque bloque_sino','condicion',7,'p_condicion','patito.py',173),
  ('bloque_sino -> SINO bloque','bloque_sino',2,'p_bloque_sino','patito.py',176),
  ('bloque_sino -> empty','bloque_sino',1,'p_bloque_sino','patito.py',177),
  ('func_call_params -> megaexp more_call_params','func_call_params',2,'p_func_call_params','patito.py',181),
  ('func_call_params -> empty','func_call_params',1,'p_func_call_params','patito.py',182),
  ('more_call_params -> COMMA megaexp','more_call_params',2,'p_more_call_params','patito.py',185),
  ('more_call_params -> empty','more_call_params',1,'p_more_call_params','patito.py',186),
  ('func_void -> ID OPENPAR CLOSEPAR func_call_params SEMICOLON','func_void',5,'p_func_void','patito.py',189),
  ('escribe -> ESCRIBE OPENPAR print_options CLOSEPAR SEMICOLON','escribe',5,'p_escribe','patito.py',193),
  ('print_options -> CTES more_print','print_options',2,'p_print_options','patito.py',196),
  ('print_options -> megaexp more_print','print_options',2,'p_print_options','patito.py',197),
  ('more_print -> COMMA CTES','more_print',2,'p_more_print','patito.py',200),
  ('more_print -> COMMA megaexp','more_print',2,'p_more_print','patito.py',201),
  ('more_print -> empty','more_print',1,'p_more_print','patito.py',202),
  ('lee -> LEE OPENPAR ID read_more CLOSEPAR SEMICOLON','lee',6,'p_lee','patito.py',206),
  ('read_more -> COMMA ID read_more','read_more',3,'p_read_more','patito.py',209),
  ('read_more -> empty','read_more',1,'p_read_more','patito.py',210),
  ('retorno -> RETORNO OPENPAR megaexp CLOSEPAR','retorno',4,'p_retorno','patito.py',214),
  ('blooean_op -> OR','blooean_op',1,'p_boolean_op','patito.py',218),
  ('blooean_op -> AND','blooean_op',1,'p_boolean_op','patito.py',219),
  ('logical_op -> GT','logical_op',1,'p_logical_op','patito.py',222),
  ('logical_op -> GTE','logical_op',1,'p_logical_op','patito.py',223),
  ('logical_op -> LT','logical_op',1,'p_logical_op','patito.py',224),
  ('logical_op -> LTE','logical_op',1,'p_logical_op','patito.py',225),
  ('logical_op -> NEQ','logical_op',1,'p_logical_op','patito.py',226),
  ('logical_op -> EQ','logical_op',1,'p_logical_op','patito.py',227),
  ('sums -> MINUS','sums',1,'p_sums','patito.py',230),
  ('sums -> PLUS','sums',1,'p_sums','patito.py',231),
  ('multdiv -> TIMES','multdiv',1,'p_multdiv','patito.py',234),
  ('multdiv -> DIVIDE','multdiv',1,'p_multdiv','patito.py',235),
  ('megaexp -> superexp','megaexp',1,'p_megaexp','patito.py',239),
  ('megaexp -> superexp blooean_op megaexp','megaexp',3,'p_megaexp','patito.py',240),
  ('superexp -> exp','superexp',1,'p_superexp','patito.py',243),
  ('superexp -> exp logical_op superexp','superexp',3,'p_superexp','patito.py',244),
  ('exp -> termino','exp',1,'p_exp','patito.py',247),
  ('exp -> termino sums exp','exp',3,'p_exp','patito.py',248),
  ('termino -> factor','termino',1,'p_termino','patito.py',251),
  ('termino -> factor multdiv factor','termino',3,'p_termino','patito.py',252),
  ('factor -> vcte','factor',1,'p_factor','patito.py',255),
  ('factor -> OPENPAR megaexp CLOSEPAR','factor',3,'p_factor','patito.py',256),
  ('vcte -> id','vcte',1,'p_vcte','patito.py',259),
  ('vcte -> CTEI','vcte',1,'p_vcte','patito.py',260),
  ('vcte -> CTEF','vcte',1,'p_vcte','patito.py',261),
  ('vcte -> CTEC','vcte',1,'p_vcte','patito.py',262),
  ('desde -> DESDE ID ASSIGN exp HASTA exp HACER bloque','desde',8,'p_desde','patito.py',265),
  ('mientras -> MIENTRAS OPENPAR megaexp CLOSEPAR HAZ bloque','mientras',6,'p_mientras','patito.py',268),
  ('empty -> <empty>','empty',0,'p_empty','patito.py',271),
]
