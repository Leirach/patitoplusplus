Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGN
    BOOL
    CHAR
    CLOSEBRAC
    CTES
    DESDE
    DIVIDE
    ENTONCES
    EQ
    FLOAT
    FUNCION
    GT
    GTE
    HACER
    HASTA
    HAZ
    INT
    LCURLYB
    LT
    LTE
    MIENTRAS
    MINUS
    NEQ
    OPENBRAC
    OR
    PLUS
    PRINCIPAL
    PROGRAMA
    QUACKIN
    QUACKOUT
    RCURLYB
    RETORNO
    SI
    SINO
    TIMES
    VAR
    VOID

Grammar

Rule 0     S' -> func_void
Rule 1     func_void -> func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLON
Rule 2     func_call_id -> ID
Rule 3     func_call_params -> vcte more_call_params
Rule 4     func_call_params -> empty
Rule 5     more_call_params -> COMMA vcte more_call_params
Rule 6     more_call_params -> empty
Rule 7     vcte -> ID
Rule 8     vcte -> CTEI
Rule 9     vcte -> CTEF
Rule 10    vcte -> CTEC
Rule 11    vcte -> TRUE
Rule 12    vcte -> FALSE
Rule 13    empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BOOL                 : 
CHAR                 : 
CLOSEBRAC            : 
CLOSEPAR             : 1
COMMA                : 5
CTEC                 : 10
CTEF                 : 9
CTEI                 : 8
CTES                 : 
DESDE                : 
DIVIDE               : 
ENTONCES             : 
EQ                   : 
FALSE                : 12
FLOAT                : 
FUNCION              : 
GT                   : 
GTE                  : 
HACER                : 
HASTA                : 
HAZ                  : 
ID                   : 2 7
INT                  : 
LCURLYB              : 
LT                   : 
LTE                  : 
MIENTRAS             : 
MINUS                : 
NEQ                  : 
OPENBRAC             : 
OPENPAR              : 1
OR                   : 
PLUS                 : 
PRINCIPAL            : 
PROGRAMA             : 
QUACKIN              : 
QUACKOUT             : 
RCURLYB              : 
RETORNO              : 
SEMICOLON            : 1
SI                   : 
SINO                 : 
TIMES                : 
TRUE                 : 11
VAR                  : 
VOID                 : 
error                : 

Nonterminals, with rules where they appear

empty                : 4 6
func_call_id         : 1
func_call_params     : 1
func_void            : 0
more_call_params     : 3 5
vcte                 : 3 5

Parsing method: LALR

state 0

    (0) S' -> . func_void
    (1) func_void -> . func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLON
    (2) func_call_id -> . ID

    ID              shift and go to state 3

    func_void                      shift and go to state 1
    func_call_id                   shift and go to state 2

state 1

    (0) S' -> func_void .



state 2

    (1) func_void -> func_call_id . OPENPAR func_call_params CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 4


state 3

    (2) func_call_id -> ID .

    OPENPAR         reduce using rule 2 (func_call_id -> ID .)


state 4

    (1) func_void -> func_call_id OPENPAR . func_call_params CLOSEPAR SEMICOLON
    (3) func_call_params -> . vcte more_call_params
    (4) func_call_params -> . empty
    (7) vcte -> . ID
    (8) vcte -> . CTEI
    (9) vcte -> . CTEF
    (10) vcte -> . CTEC
    (11) vcte -> . TRUE
    (12) vcte -> . FALSE
    (13) empty -> .

    ID              shift and go to state 8
    CTEI            shift and go to state 9
    CTEF            shift and go to state 10
    CTEC            shift and go to state 11
    TRUE            shift and go to state 12
    FALSE           shift and go to state 13
    CLOSEPAR        reduce using rule 13 (empty -> .)

    func_call_params               shift and go to state 5
    vcte                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) func_void -> func_call_id OPENPAR func_call_params . CLOSEPAR SEMICOLON

    CLOSEPAR        shift and go to state 14


state 6

    (3) func_call_params -> vcte . more_call_params
    (5) more_call_params -> . COMMA vcte more_call_params
    (6) more_call_params -> . empty
    (13) empty -> .

    COMMA           shift and go to state 16
    CLOSEPAR        reduce using rule 13 (empty -> .)

    more_call_params               shift and go to state 15
    empty                          shift and go to state 17

state 7

    (4) func_call_params -> empty .

    CLOSEPAR        reduce using rule 4 (func_call_params -> empty .)


state 8

    (7) vcte -> ID .

    COMMA           reduce using rule 7 (vcte -> ID .)
    CLOSEPAR        reduce using rule 7 (vcte -> ID .)


state 9

    (8) vcte -> CTEI .

    COMMA           reduce using rule 8 (vcte -> CTEI .)
    CLOSEPAR        reduce using rule 8 (vcte -> CTEI .)


state 10

    (9) vcte -> CTEF .

    COMMA           reduce using rule 9 (vcte -> CTEF .)
    CLOSEPAR        reduce using rule 9 (vcte -> CTEF .)


state 11

    (10) vcte -> CTEC .

    COMMA           reduce using rule 10 (vcte -> CTEC .)
    CLOSEPAR        reduce using rule 10 (vcte -> CTEC .)


state 12

    (11) vcte -> TRUE .

    COMMA           reduce using rule 11 (vcte -> TRUE .)
    CLOSEPAR        reduce using rule 11 (vcte -> TRUE .)


state 13

    (12) vcte -> FALSE .

    COMMA           reduce using rule 12 (vcte -> FALSE .)
    CLOSEPAR        reduce using rule 12 (vcte -> FALSE .)


state 14

    (1) func_void -> func_call_id OPENPAR func_call_params CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 18


state 15

    (3) func_call_params -> vcte more_call_params .

    CLOSEPAR        reduce using rule 3 (func_call_params -> vcte more_call_params .)


state 16

    (5) more_call_params -> COMMA . vcte more_call_params
    (7) vcte -> . ID
    (8) vcte -> . CTEI
    (9) vcte -> . CTEF
    (10) vcte -> . CTEC
    (11) vcte -> . TRUE
    (12) vcte -> . FALSE

    ID              shift and go to state 8
    CTEI            shift and go to state 9
    CTEF            shift and go to state 10
    CTEC            shift and go to state 11
    TRUE            shift and go to state 12
    FALSE           shift and go to state 13

    vcte                           shift and go to state 19

state 17

    (6) more_call_params -> empty .

    CLOSEPAR        reduce using rule 6 (more_call_params -> empty .)


state 18

    (1) func_void -> func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLON .

    $end            reduce using rule 1 (func_void -> func_call_id OPENPAR func_call_params CLOSEPAR SEMICOLON .)


state 19

    (5) more_call_params -> COMMA vcte . more_call_params
    (5) more_call_params -> . COMMA vcte more_call_params
    (6) more_call_params -> . empty
    (13) empty -> .

    COMMA           shift and go to state 16
    CLOSEPAR        reduce using rule 13 (empty -> .)

    more_call_params               shift and go to state 20
    empty                          shift and go to state 17

state 20

    (5) more_call_params -> COMMA vcte more_call_params .

    CLOSEPAR        reduce using rule 5 (more_call_params -> COMMA vcte more_call_params .)

